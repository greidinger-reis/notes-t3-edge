import Head from "next/head";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { type CreateNoteInput, createNoteInputSchema } from "~/schemas/example";
import { api, type RouterOutputs } from "~/utils/api";
import { SignInButton, UserButton, useSession } from "@clerk/nextjs";
import { useAutoAnimate } from "@formkit/auto-animate/react";

function AuthShowcase() {
    const { isSignedIn } = useSession();
    const secretMessageQuery = api.auth.secretMessage.useQuery(undefined, {
        enabled: isSignedIn,
    });

    return (
        <div className="h-16 w-full bg-zinc-800 p-4 font-medium">
            {isSignedIn ? (
                <div className="flex items-center justify-between gap-2">
                    <p>{secretMessageQuery.data}</p>
                    <UserButton />
                </div>
            ) : (
                <div className="flex items-center justify-end">
                    <SignInButton mode="modal" />
                </div>
            )}
        </div>
    );
}

type NoteListQueryOutput = RouterOutputs["notes"]["list"][number];

function NoteCard({ note }: { note: NoteListQueryOutput }) {
    const ctx = api.useContext();
    const { session } = useSession();
    const { mutateAsync: deleteNote } = api.notes.delete.useMutation({
        onSuccess: async () => {
            await ctx.notes.list.invalidate();
        },
    });

    return (
        <li className="relative rounded bg-zinc-800 p-4 transition-all duration-300 hover:scale-105">
            <div className="text-sm text-zinc-300">
                {note.authorName}{" "}
                <span className="text-xs text-zinc-400">
                    {note.createdAt.toLocaleDateString() +
                        " " +
                        note.createdAt
                            .toLocaleTimeString()
                            .split(":")
                            .slice(0, 2)
                            .join(":")}
                </span>
            </div>
            <p className="break-words">{note.text}</p>
            {session?.user.id === note.authorId && (
                <div className="absolute bottom-1 right-1 p-2">
                    <button
                        className="text-xs text-red-500"
                        //eslint-disable-next-line @typescript-eslint/no-misused-promises
                        onClick={async () => {
                            await deleteNote({ id: note.id });
                        }}
                    >
                        Delete
                    </button>
                </div>
            )}
        </li>
    );
}

export default function Home() {
    const { isSignedIn } = useSession();
    const [parent] = useAutoAnimate<HTMLUListElement>();
    const ctx = api.useContext();
    const listQuery = api.notes.list.useQuery();
    const createQuery = api.notes.create.useMutation({
        onSuccess: async () => {
            await ctx.notes.list.invalidate();
        },
    });

    const {
        handleSubmit,
        register,
        formState: { errors },
    } = useForm<CreateNoteInput>({
        resolver: zodResolver(createNoteInputSchema),
    });

    async function onSubmit(data: CreateNoteInput) {
        await createQuery.mutateAsync(data);
    }

    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="text-white">
                <AuthShowcase />
                <main className="container mx-auto max-w-3xl space-y-4 py-32">
                    <h1 className="text-2xl font-bold">Notes</h1>
                    <ul ref={parent} className="space-y-4">
                        {listQuery.data?.map((note) => (
                            <NoteCard key={note.id} note={note} />
                        ))}
                    </ul>
                    {isSignedIn ? (
                        <form
                            //eslint-disable-next-line @typescript-eslint/no-misused-promises
                            onSubmit={handleSubmit(onSubmit)}
                            className="flex flex-col"
                        >
                            <h2 className="mb-2 text-xl font-bold">New Note</h2>
                            <textarea
                                placeholder="Note body"
                                className="resize-none rounded-t bg-zinc-800 p-4"
                                {...register("text")}
                                rows={8}
                            />
                            {errors && errors.text && (
                                <p className="text-sm text-red-500">
                                    {errors.text.message}
                                </p>
                            )}
                            <button
                                className="rounded-b bg-zinc-800/60 px-4 py-2 text-zinc-400 transition-all hover:bg-zinc-800/30"
                                type="submit"
                            >
                                Submit
                            </button>
                        </form>
                    ) : (
                        <h2 className="text-center text-xl font-bold">
                            Sign In to create notes.
                        </h2>
                    )}
                </main>
            </div>
        </>
    );
}
