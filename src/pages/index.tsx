import { type NextPage } from "next";
import Head from "next/head";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { type CreateExampleInput, createExampleInput } from "~/schemas/example";
import { api } from "~/utils/api";

const Home: NextPage = () => {
    const ctx = api.useContext();
    const listQuery = api.example.list.useQuery();
    const createQuery = api.example.create.useMutation({
        onSuccess: async () => {
            await ctx.example.list.invalidate();
        },
    });

    const {
        handleSubmit,
        register,
        formState: { errors },
    } = useForm<CreateExampleInput>({
        resolver: zodResolver(createExampleInput),
    });

    async function onSubmit(data: CreateExampleInput) {
        await createQuery.mutateAsync(data);
    }

    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className="container mx-auto max-w-3xl space-y-4 py-32">
                <h1>Examples</h1>
                <h2>
                    Elapsed fetch time {listQuery.data?.time}ms (from server to
                    db)
                </h2>
                <ul className="space-y-4">
                    {listQuery.data?.list.map((example) => (
                        <li key={example.id}>
                            <p>{example.text}</p>
                            <p>{example.createdAt.toLocaleDateString()}</p>
                        </li>
                    ))}
                </ul>
                <form
                    //eslint-disable-next-line @typescript-eslint/no-misused-promises
                    onSubmit={handleSubmit(onSubmit)}
                    className="flex flex-col"
                >
                    <label htmlFor="text">Text</label>
                    <textarea className="p-4" {...register("text")} rows={8} />
                    {errors && errors.text && (
                        <p className="text-sm text-red-500">
                            {errors.text.message}
                        </p>
                    )}
                    <button type="submit">Submit</button>
                </form>
            </main>
        </>
    );
};

export default Home;
